@model IEnumerable<Entidades.Models.Movimento>

@{
    ViewBag.Title = "Index";
    double countLucro = 0;
    double countGastos = 0;
    double countRecebidos = 0;
    var selMes = ViewBag.selMes;
}
@*<link href="~/Content/morris.css" rel="stylesheet" />*@
<form name="formMes" method="get" action="" style="margin-top:10px;">
    <label>Escolha o mes</label>
    <select id="selMes" name="selMes" class="selectpicker">
        <option @(selMes == 0 ? "selected" : "") value="0">Todos</option>
        <option @(selMes == 1 ? "selected" : "") value="1">Janeiro</option>
        <option @(selMes == 2 ? "selected" : "") value="2">Fevereiro</option>
        <option @(selMes == 3 ? "selected" : "") value="3">Março</option>
        <option @(selMes == 4 ? "selected" : "") value="4">Abril</option>
        <option @(selMes == 5 ? "selected" : "") value="5">Maio</option>
        <option @(selMes == 6 ? "selected" : "") value="6">Junho</option>
        <option @(selMes == 7 ? "selected" : "") value="7">Julho</option>
        <option @(selMes == 8 ? "selected" : "") value="8">Agosto</option>
        <option @(selMes == 9 ? "selected" : "") value="9">Setembro</option>
        <option @(selMes == 10 ? "selected" : "") value="10">Outubro</option>
        <option @(selMes == 11 ? "selected" : "") value="11">Novembro</option>
        <option @(selMes == 12 ? "selected" : "") value="12">Dezembro</option>
    </select>
    @*<button class="btn btn-info" type="submit">Procurar</button>*@
</form>
@if (Model.Count() > 0)
{
    <div class="col-sm-12 text-center">
        <div id="bar-chart" style="min-height:250px;"></div>
    </div>
}
<div class="table-wrapper-2 col-sm-12" style="margin-top:10px;">
    <table class="table table-responsive-md">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.DataTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Descricao)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Valor)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Saldo_Atual)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tipo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Departamento)
            </th>
            <th></th>
        </tr>
        @if (Model.Count() > 0)
        {
            foreach (var item in Model)
            {
                countLucro += item.Valor;
                var tw = "";
                if (item.Tipo.ToString().Equals("Debito") || item.Tipo.ToString().Equals("Transferencia") || item.Tipo.ToString().Equals("Pagamento") || item.Tipo.ToString().Equals("Levantamento"))
                {
                    countGastos += item.Valor;
                    tw = "text-danger";
                }
                else
                {
                    countRecebidos += item.Valor;
                    tw = "text-success";
                }
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.DataTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Descricao)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Valor)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Saldo_Atual)
                    </td>
                    <td>
                        <label class="@tw">@item.Tipo</label>
                    </td>
                    <td>
                        @if (item.Valor < 0)
                        {
                            @Html.EnumDropDownListFor(modelItem => item.Departamento, htmlAttributes: new { @class = "form-control selDepart", @data_mov = item.Id })
                        }
                        else
                        {
                            <label class="@tw">@item.Tipo</label>
                        }
                    </td>
                    <td>
                        @Html.ActionLink(" ", "Edit", new { id = item.Id }, new { @class = "btn btn-primary btn-sm glyphicon glyphicon-pencil" })
                        @Html.ActionLink(" ", "Details", new { id = item.Id }, new { @class = "btn btn-warning btn-sm glyphicon glyphicon-menu-hamburger" })
                        @Html.ActionLink(" ", "Delete", new { id = item.Id }, new { @class = "btn btn-danger btn-sm glyphicon glyphicon-trash" })
                    </td>
                </tr>

            }
        }
        else
        {
            <tr><td>Nao tem movimentos</td></tr>
        }
    </table>
</div>
@{
    var split = "" + countGastos;
    if (countGastos < 0)
    {
        countGastos = Double.Parse(split.Remove(0, 1));
    }
}
@if (Model.Count() > 0)
{
    <div class="mar">
        <div class="col-sm-12 col-md-6">
            <img src="@Url.Action("CharterColumn", new { selMes = selMes })" alt="Chart" />
        </div>
        <div class="col-sm-12 col-md-6">
            <img src="@Url.Action("CharterColumn2", new { Gasto = countGastos, Rec = countRecebidos, Luc = countLucro })" alt="Chart" />
        </div>

    </div>

}
@section Scripts{
    <script src="~/Scripts/morris/morris.min.js"></script>
    <script src="~/Scripts/morris/raphael.min.js"></script>
    <script>
        $(function () {
            updateGraph();
    $("#selMes").change(function(){
        var v = $(this).val();

    window.location.href="@Url.Action("Index", "Movimentoes")?selMes="+v;
        });

        $(".selDepart").change(function () {
            var v = $(this).val();
            var cid = $(this).data('mov');
            $.get('@Url.Action("UpdateDepart", "Movimentoes")?value=' + v + "&id=" + cid, function () {
                updateGraph();
            });

        });
        function updateGraph() {
            var selMes = $('#selMes').val();
            $('#bar-chart').children().remove();
            $.get('@Url.Action("CharterColumn3", "Movimentoes", new { selMes= selMes})', function (result) {
            new Morris.Bar(
                {
                    element: 'bar-chart',
                    data: result,
                    xkey: 'label',
                    ykeys: ['value'],
                    labels: ['Gastou(€)'],
                    baraRatio: 0.6,
                    hideHover: 'auto',
                    behaveLikeLine: true,
                    resize: true,
                    pointFillColors: ['#ffffff'],
                    pointStrokeColors: ['black'],
                    barColors: ['#d9534f'],
                    lineColors: ['gray', 'red']
                });
            });
        }
        });
    </script>
}



@*//var data = [
    //    { y: 'Supermecado', a: 50},
    //    { y: 'Restaurante', a: 65},
    //    { y: 'Educaçao', a: 50},
    //    { y: 'Transportes', a: 75},
    //    { y: 'Saude', a: 80}
    //],
    //    config = {
    //        data: data,
    //        xkey: 'y',
    //        ykeys: ['a'],
    //        labels: ['Total Spent(€)'],
    //        fillOpacity: 0.6,
    //        hideHover: 'auto',
    //        behaveLikeLine: true,
    //        resize: true,
    //        pointFillColors: ['#ffffff'],
    //        pointStrokeColors: ['black'],
    //        lineColors: ['gray', 'red']
    //    };
    //config.element = 'bar-chart';
    //Morris.Bar(config);*@